# Registration of a block

A block is usually registered in both the server and the client using its `block.json` metadata. 

Although technically blocks could be registered only on the client, **registering blocks in both the server and the client is a general recommendation**, as some key features like Dynamic Rendering, Block Hooks or Block style variations won't work properly without a server registration of the block. 

[![Open Block Registration diagram in excalidraw](https://developer.wordpress.org/files/2023/11/block-registration-e1700493399839.png)](https://excalidraw.com/#json=PUQu7jpvbKsUHYfpHWn7s,61QnhpZtjykp3s44lbUN_g "Open Block Registration diagram in excalidraw")

## Registering the block in the server

The registration of a block in the server, usually takes place in the main plugin PHP file with the [`register_block_type`](https://developer.wordpress.org/reference/functions/register_block_type/) function called on the [`init` action](https://developer.wordpress.org/reference/hooks/init/)  

`register_block_type` takes a first parameter to get the metadata of the block that can be provided:
-  with the path to the `block.json` file with the metadata definition for the block
-  with the path to the folder where the `block.json` file is located

Note that if there's a build process involved, the registered `block.json` should be the one in `build` folder.

```php
function minimal_block_ca6eda___register_block() {
	register_block_type( __DIR__ . '/build' );
}

add_action( 'init', 'minimal_block_ca6eda___register_block' );
```
_See the [code above](https://github.com/WordPress/block-development-examples/blob/trunk/plugins/minimal-block-ca6eda/index.php) in [an example](https://github.com/WordPress/block-development-examples/tree/trunk/plugins/minimal-block-ca6eda)_

Registering a block in the server by calling to `register_block_type` with just its first argument is enough in most of the cases.

## Registering the block in the client

The registration of a block in the client (for the Block Editor), usually takes place in the `index.js` file (or any other file defined in the `editorScript` property of `block.json`) via the [`registerBlockType` function](https://developer.wordpress.org/block-editor/reference-guides/packages/packages-blocks/#registerblocktype).

The `registerBlockType` function takes the following paramenters:
- A first parameter with the block name (if the block has also been registered on the server) or an object with the metadata of the block
- A second parameter with an object with settings for the block. The most important properties of this object settings are:
	- `edit`:  
	- `save`:  

```
import { registerBlockType } from '@wordpress/blocks';
import metadata from './block.json';

registerBlockType( metadata.name, {
	edit() {
		return <p>Hello World - Block Editor</p>;
	},
	save() {
		return <p>Hello World - Frontend</p>;
	},
} );
```
_See the [code above](https://github.com/WordPress/block-development-examples/blob/trunk/plugins/minimal-block-ca6eda/src/index.js) in [an example](https://github.com/WordPress/block-development-examples/tree/trunk/plugins/minimal-block-ca6eda)_


<div class="callout callout-info">
At its simplest form, a block it is a <code>registerBlockType</code> function call with some parameters passed in JS. 
</div>


## Additional resources

- [`wp-scripts build`](https://developer.wordpress.org/block-editor/reference-guides/packages/packages-scripts/#build)
- [`wp-scripts start`](https://developer.wordpress.org/block-editor/reference-guides/packages/packages-scripts/#start)
- [How webpack and WordPress packages interact](https://developer.wordpress.org/news/2023/04/how-webpack-and-wordpress-packages-interact/) | Developer Blog
- [Why a block needs to be registered in both the server and the client?](https://github.com/WordPress/gutenberg/discussions/55884) | GitHub Discussion